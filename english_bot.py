import os
import logging
import json
import random
import re
import sqlite3
import datetime
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GOAL, CURRENT_LEVEL, TARGET_LEVEL, CONVERSATION_MODE, EXERCISE_MODE = range(5)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}
vocabulary = {}
user_progress = {}

# –£—Ä–æ–≤–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
LEVELS = ["A1 (–ù–∞—á–∞–ª—å–Ω—ã–π)", "A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π)", "B1 (–°—Ä–µ–¥–Ω–∏–π)", "B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)", "C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", "C2 (–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π)"]

# –ë–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
EXERCISES = {
    "A1": [
        {
            "type": "translation",
            "question": "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ: '–Ø –ª—é–±–ª—é –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'",
            "answer": "I love learning English",
            "hint": "–í—Å–ø–æ–º–Ω–∏—Ç–µ: love + ing —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞"
        },
        {
            "type": "gap_filling", 
            "question": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫: I ___ breakfast at 8 am.",
            "answer": "have",
            "options": ["have", "has", "am"]
        },
        {
            "type": "sentence_building",
            "question": "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤: like / I / music / listening / to",
            "answer": "I like listening to music",
            "hint": "–ü–æ—Ä—è–¥–æ–∫: –ü–æ–¥–ª–µ–∂–∞—â–µ–µ + —Å–∫–∞–∑—É–µ–º–æ–µ + –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        }
    ],
    "A2": [
        {
            "type": "conversation",
            "question": "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: What did you do yesterday?",
            "answer_patterns": ["yesterday", "went", "did", "was"],
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Past Simple"
        },
        {
            "type": "grammar",
            "question": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: She ___ to school every day.",
            "answer": "goes",
            "options": ["go", "goes", "is going"]
        }
    ],
    "B1": [
        {
            "type": "writing",
            "question": "–ù–∞–ø–∏—à–∏—Ç–µ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤–∞—à–µ–º —Ö–æ–±–±–∏",
            "min_words": 20,
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Present Simple –∏ —Å–ª–æ–≤–∞: enjoy, usually, often"
        },
        {
            "type": "grammar",
            "question": "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: If I ___ time, I will call you.",
            "answer": "have",
            "options": ["have", "had", "will have"]
        }
    ]
}

# –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
CONVERSATION_TOPICS = {
    "A1": ["Food", "Family", "Daily routine", "Hobbies"],
    "A2": ["Travel", "Weather", "Shopping", "Weekend plans"],
    "B1": ["Work", "Technology", "Health", "Culture"],
    "B2": ["Education", "Environment", "Social media", "Future plans"]
}

def get_user_level(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_data.get(user_id, {}).get('current_level', 'A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π)')

def add_to_vocabulary(user_id: int, word: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in vocabulary:
        vocabulary[user_id] = set()
    vocabulary[user_id].add(word.lower())

def update_progress(user_id: int, exercise_type: str, correct: bool = True):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_progress:
        user_progress[user_id] = {
            'total_exercises': 0,
            'correct_answers': 0,
            'last_activity': datetime.datetime.now().isoformat(),
            'exercise_types': {}
        }
    
    user_progress[user_id]['total_exercises'] += 1
    user_progress[user_id]['last_activity'] = datetime.datetime.now().isoformat()
    
    if correct:
        user_progress[user_id]['correct_answers'] += 1
    
    if exercise_type not in user_progress[user_id]['exercise_types']:
        user_progress[user_id]['exercise_types'][exercise_type] = 0
    user_progress[user_id]['exercise_types'][exercise_type] += 1

def get_level_key(level: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —É—Ä–æ–≤–Ω—è (A1, A2, etc)"""
    return level.split()[0]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Tutor Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑:
‚Ä¢ üìö –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ üí¨ –ü—Ä–∞–∫—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–æ–≤  
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ üìù –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?
"""
    
    keyboard = [
        ["üó£Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"],
        ["üìñ –ß—Ç–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"],
        ["‚úçÔ∏è –ü–∏—Å—å–º–æ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞"],
        ["üéØ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return GOAL

async def set_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user = update.message.from_user
    user_id = user.id
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['goal'] = update.message.text
    
    await update.message.reply_text(
        f"üéØ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ü–µ–ª—å: {update.message.text}\n\n"
        "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?",
        reply_markup=ReplyKeyboardMarkup([
            LEVELS[:2],
            LEVELS[2:4], 
            LEVELS[4:]
        ], resize_keyboard=True)
    )
    return CURRENT_LEVEL

async def set_current_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    user = update.message.from_user
    user_id = user.id
    
    user_data[user_id]['current_level'] = update.message.text
    
    await update.message.reply_text(
        f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {update.message.text}\n\n"
        "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?",
        reply_markup=ReplyKeyboardMarkup([
            LEVELS[:2],
            LEVELS[2:4],
            LEVELS[4:]
        ], resize_keyboard=True)
    )
    return TARGET_LEVEL

async def set_target_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user = update.message.from_user
    user_id = user.id
    
    user_data[user_id]['target_level'] = update.message.text
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
    plan = generate_study_plan(user_id)
    user_data[user_id]['plan'] = plan
    
    await update.message.reply_text(
        f"üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚Ä¢ –¶–µ–ª—å: {user_data[user_id]['goal']}\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['current_level']}\n"
        f"‚Ä¢ –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {user_data[user_id]['target_level']}\n\n"
        f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{plan}",
        reply_markup=ReplyKeyboardMarkup([
            ["üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"],
            ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å"],
            ["üÜò –ü–æ–º–æ—â—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

def generate_study_plan(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    data = user_data[user_id]
    current = get_level_key(data['current_level'])
    target = get_level_key(data['target_level'])
    
    plans = {
        "A1": "‚Ä¢ –£—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏ —Å–ª–æ–≤–∞\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è\n‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        "A2": "‚Ä¢ –†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å\n‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è\n‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–∞—Ö", 
        "B1": "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏\n‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞\n‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã",
        "B2": "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–∏—Å—å–º–æ\n‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã"
    }
    
    return plans.get(current, "‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —è–∑—ã–∫–∞\n‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫")

async def start_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —É—Ä–æ–∫ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏"""
    user_id = update.message.from_user.id
    
    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    level = get_level_key(get_user_level(user_id))
    exercises = EXERCISES.get(level, EXERCISES["A2"])
    exercise = random.choice(exercises)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['current_exercise'] = exercise
    context.user_data['exercise_start_time'] = datetime.datetime.now().isoformat()
    
    message = f"üìö **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ**\n\n{exercise['question']}"
    if 'hint' in exercise:
        message += f"\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {exercise['hint']}"
    
    if exercise['type'] == 'gap_filling' and 'options' in exercise:
        keyboard = [[opt] for opt in exercise['options']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())
    
    return EXERCISE_MODE

async def check_exercise_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    user_id = update.message.from_user.id
    user_answer = update.message.text.strip()
    
    if 'current_exercise' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /lesson")
        return ConversationHandler.END
    
    exercise = context.user_data['current_exercise']
    is_correct = False
    feedback = ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if exercise['type'] == 'translation':
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ - –∏—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        expected_words = exercise['answer'].lower().split()
        user_words = user_answer.lower().split()
        matches = sum(1 for word in expected_words if word in user_words)
        is_correct = matches >= len(expected_words) * 0.6  # 60% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        
    elif exercise['type'] == 'gap_filling':
        is_correct = user_answer.lower() == exercise['answer'].lower()
        
    elif exercise['type'] == 'sentence_building':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        expected_words = exercise['answer'].lower().split()
        user_words = user_answer.lower().split()
        is_correct = all(word in user_words for word in expected_words)
        
    elif exercise['type'] == 'conversation':
        # –î–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        expected_patterns = exercise['answer_patterns']
        user_lower = user_answer.lower()
        matches = sum(1 for pattern in expected_patterns if pattern in user_lower)
        is_correct = matches >= len(expected_patterns) * 0.5
        
    elif exercise['type'] == 'grammar':
        is_correct = user_answer.lower() == exercise['answer'].lower()
        
    elif exercise['type'] == 'writing':
        # –î–ª—è –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        word_count = len(user_answer.split())
        is_correct = word_count >= exercise.get('min_words', 15)
        feedback = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ {word_count} —Å–ª–æ–≤."
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    update_progress(user_id, exercise['type'], is_correct)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    words = re.findall(r'\b[a-zA-Z]+\b', user_answer)
    for word in words:
        if len(word) > 3:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 3 –±—É–∫–≤
            add_to_vocabulary(user_id, word)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        if not feedback:
            feedback = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        if exercise['type'] in ['translation', 'sentence_building']:
            feedback += f"\n\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: '{exercise['answer']}'"
    else:
        feedback = f"‚ùå –ü–æ–∫–∞ –Ω–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{exercise.get('answer', '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ')}'"
    
    await update.message.reply_text(
        feedback,
        reply_markup=ReplyKeyboardMarkup([
            ["üìö –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"],
            ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    context.user_data.pop('current_exercise', None)
    
    return ConversationHandler.END

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    level = get_level_key(get_user_level(user_id))
    topics = CONVERSATION_TOPICS.get(level, CONVERSATION_TOPICS["A2"])
    topic = random.choice(topics)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    questions = {
        "A1": [
            f"What do you like about {topic.lower()}?",
            f"Do you have {topic.lower()} in your family?",
            f"What is your favorite {topic.lower()}?"
        ],
        "A2": [
            f"How often do you {topic.lower()}?",
            f"What did you do last time you {topic.lower()}ed?",
            f"Do you prefer {topic.lower()} alone or with friends?"
        ],
        "B1": [
            f"What are the advantages and disadvantages of {topic.lower()}?",
            f"How has {topic.lower()} changed in recent years?",
            f"What role does {topic.lower()} play in your life?"
        ]
    }
    
    question = random.choice(questions.get(level, questions["A2"]))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    context.user_data['conversation_topic'] = topic
    context.user_data['conversation_start'] = datetime.datetime.now().isoformat()
    
    await update.message.reply_text(
        f"üí¨ **–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞**\n\n"
        f"–¢–µ–º–∞: {topic}\n\n"
        f"{question}\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:",
        reply_markup=ReplyKeyboardMarkup([
            ["üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞"],
            ["üìö –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ], resize_keyboard=True)
    )
    
    return CONVERSATION_MODE

async def handle_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    user_message = update.message.text
    
    if user_message == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –¥–∏–∞–ª–æ–≥–∞
        start_time = context.user_data.get('conversation_start')
        duration = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        if start_time:
            start_dt = datetime.datetime.fromisoformat(start_time)
            duration_min = (datetime.datetime.now() - start_dt).seconds // 60
            duration = f"{duration_min} –º–∏–Ω—É—Ç"
        
        await update.message.reply_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞!\n\n"
            f"üí¨ –í—ã –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π {duration}\n"
            f"üìö –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å\n"
            f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            reply_markup=ReplyKeyboardMarkup([
                ["üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üí¨ –ù–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"],
                ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
        
    elif user_message == "üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞":
        return await start_conversation(update, context)
    
    elif user_message in ["üìö –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await handle_main_navigation(update, context)
    
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        words = re.findall(r'\b[a-zA-Z]+\b', user_message)
        for word in words:
            if len(word) > 3:
                add_to_vocabulary(user_id, word)
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        feedback = "üí¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! "
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        word_count = len(user_message.split())
        if word_count < 5:
            feedback += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
        elif word_count < 10:
            feedback += "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π."
        else:
            feedback += "–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!"
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ
        topic = context.user_data.get('conversation_topic', 'general')
        follow_up_questions = [
            "Can you tell me more about that?",
            "Why do you think that?",
            "What happened next?",
            "How did you feel about it?"
        ]
        
        next_question = random.choice(follow_up_questions)
        
        await update.message.reply_text(
            f"{feedback}\n\n{next_question}",
            reply_markup=ReplyKeyboardMarkup([
                ["üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤–∞—è —Ç–µ–º–∞"],
                ["üìö –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ], resize_keyboard=True)
        )
        
        return CONVERSATION_MODE

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if user_id not in user_progress:
        await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        return
    
    progress = user_progress[user_id]
    total = progress['total_exercises']
    correct = progress['correct_answers']
    accuracy = (correct / total * 100) if total > 0 else 0
    
    # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercise_types = progress.get('exercise_types', {})
    popular_type = max(exercise_types.items(), key=lambda x: x[1]) if exercise_types else ("–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", 0)
    
    # –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è
    vocab_size = len(vocabulary.get(user_id, set()))
    
    progress_text = f"""
üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:**

‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total}
üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} ({accuracy:.1f}%)
üìö –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è: {vocab_size} —Å–ª–æ–≤
‚≠ê –õ—é–±–∏–º—ã–π —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {popular_type[0]} ({popular_type[1]} —Ä–∞–∑)

üí° –°–æ–≤–µ—Ç: –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    
    await update.message.reply_text(progress_text)

async def show_vocabulary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if user_id not in vocabulary or not vocabulary[user_id]:
        await update.message.reply_text("üìñ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞!")
        return
    
    words = sorted(list(vocabulary[user_id]))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 20
    vocab_text = f"üìñ **–í–∞—à —Å–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤):**\n\n"
    
    for i in range(0, min(len(words), 60), 20):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 60 —Å–ª–æ–≤
        group = words[i:i+20]
        vocab_text += f"**{i+1}-{i+len(group)}:** {', '.join(group)}\n\n"
    
    if len(words) > 60:
        vocab_text += f"... –∏ –µ—â–µ {len(words) - 60} —Å–ª–æ–≤!"
    
    await update.message.reply_text(vocab_text)

async def handle_main_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    user_message = update.message.text
    
    if user_message == "üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫" or user_message == "üìö –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        return await start_lesson(update, context)
    elif user_message == "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞" or user_message == "üí¨ –ù–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞":
        return await start_conversation(update, context)
    elif user_message == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
        return ConversationHandler.END
    elif user_message == "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å":
        await show_vocabulary(update, context)
        return ConversationHandler.END
    elif user_message == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=ReplyKeyboardMarkup([
                ["üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"],
                ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å"],
                ["üÜò –ü–æ–º–æ—â—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
            ], resize_keyboard=True)
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/lesson - –ù–∞—á–∞—Ç—å —É—Ä–æ–∫
/conversation - –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
/progress - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
/vocabulary - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å

üéØ **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é

üí° **–°–æ–≤–µ—Ç:** –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    await update.message.reply_text(help_text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await update.message.reply_text(
        "–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=ReplyKeyboardMarkup([
            ["üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫", "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"],
            ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å"],
            ["üÜò –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_goal)],
            CURRENT_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_current_level)],
            TARGET_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_target_level)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercise_handler = ConversationHandler(
        entry_points=[
            CommandHandler("lesson", start_lesson),
            MessageHandler(filters.Regex("^(üìö –ù–∞—á–∞—Ç—å —É—Ä–æ–∫|üìö –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ)$"), start_lesson)
        ],
        states={
            EXERCISE_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_exercise_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler("conversation", start_conversation),
            MessageHandler(filters.Regex("^(üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞|üí¨ –ù–æ–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)$"), start_conversation)
        ],
        states={
            CONVERSATION_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_conversation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(exercise_handler)
    application.add_handler(conversation_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("progress", show_progress))
    application.add_handler(CommandHandler("vocabulary", show_vocabulary))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    application.add_handler(MessageHandler(
        filters.Regex("^(üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å|üìñ –ú–æ–π —Å–ª–æ–≤–∞—Ä—å|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üÜò –ü–æ–º–æ—â—å)$"), 
        handle_main_navigation
    ))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
