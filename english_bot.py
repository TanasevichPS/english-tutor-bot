import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GOAL, CURRENT_LEVEL = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Tutor Bot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.

–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?
"""
    
    keyboard = [
        ["üó£Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"],
        ["üìñ –ß—Ç–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"],
        ["‚úçÔ∏è –ü–∏—Å—å–º–æ"],
        ["üéØ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return GOAL

async def set_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user = update.message.from_user
    context.user_data['goal'] = update.message.text
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ü–µ–ª—å: {update.message.text}\n\n"
        "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?",
        reply_markup=ReplyKeyboardMarkup([
            ["A1 (–ù–∞—á–∞–ª—å–Ω—ã–π)", "A2 (–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π)"],
            ["B1 (–°—Ä–µ–¥–Ω–∏–π)", "B2 (–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)"],
            ["C1 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", "C2 (–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π)"]
        ], resize_keyboard=True)
    )
    return CURRENT_LEVEL

async def set_current_level(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    user = update.message.from_user
    context.user_data['current_level'] = update.message.text
    
    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–í–∞—à–∞ —Ü–µ–ª—å: {context.user_data['goal']}\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {context.user_data['current_level']}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
        reply_markup=ReplyKeyboardMarkup([
            ["üìö –£—Ä–æ–∫", "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞"],
            ["üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", "üÜò –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True)
    )
    return ConversationHandler.END

async def start_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å —É—Ä–æ–∫"""
    exercises = [
        "üìù **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1:** –ù–∞–ø–∏—à–∏—Ç–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≤–∞—à–µ–º –¥–Ω–µ",
        "üéØ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2:** –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ: '–Ø –ª—é–±–ª—é –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π'",
        "üí¨ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3:** –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: What's your favorite hobby?",
    ]
    
    exercise = exercises[0]  # –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    
    await update.message.reply_text(
        f"üìö **–ù–∞—á–Ω–µ–º —É—Ä–æ–∫!**\n\n{exercise}\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    
    if user_message == "üìö –£—Ä–æ–∫":
        await start_lesson(update, context)
    elif user_message == "üí¨ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞":
        await update.message.reply_text(
            "üí¨ **–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞**\n\n"
            "Let's practice English! What did you do yesterday?"
        )
    elif user_message == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å":
        await update.message.reply_text(
            "üìä **–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å**\n\n"
            "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: 0\n"
            "üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ù–æ–≤–∏—á–æ–∫\n"
            "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        )
    elif user_message == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
            f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{user_message}'\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π! üöÄ"
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/lesson - –ù–∞—á–∞—Ç—å —É—Ä–æ–∫

üéØ **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üí° **–°–æ–≤–µ—Ç:** –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    await update.message.reply_text(help_text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    await update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_goal)],
            CURRENT_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_current_level)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("lesson", start_lesson))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
